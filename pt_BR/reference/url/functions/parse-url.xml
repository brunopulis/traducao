<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<!-- CREDITS: soneca -->
<!-- splitted from ./en/functions/url.xml, last change in rev 1.2 -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Interpreta uma URL e retorna os seus componentes</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
    <methodsynopsis>
     <type>mixed</type><methodname>parse_url</methodname>
     <methodparam><type>string</type><parameter>url</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>component</parameter><initializer>-1</initializer></methodparam>
    </methodsynopsis>
    <para>
     Esta função retorna uma matriz associativa retornando os vários componentes
     que estão presentes em uma url. Se um dos elementos não estiver presente,
     não será criada uma entrada para ele.
     Os valores dos elementos do array <emphasis>não</emphasis> são codificados.
    </para>
    <para>
     Esta função <emphasis role="strong">não</emphasis> é um meio para validar a URL indicada,
     ela somente quebra nas partes listadas. URLs parciais também são aceitas,
     <function>parse_url</function> tenta o melhor para interpreta-las corretamente.
    </para>
   </refsect1>
   
   <refsect1 role="parameters">
    &reftitle.parameters;
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>url</parameter></term>
       <listitem>
        <para>
         A URL a ser interpretada. Caracteres inválidos são substituídos por
         <literal>_</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <variablelist>
      <varlistentry>
       <term><parameter>component</parameter></term>
       <listitem>
        <para>
         Especifique uma das opções <constant>PHP_URL_SCHEME</constant>,
         <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
         <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
         <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
         ou <constant>PHP_URL_FRAGMENT</constant> para retornar um componente
         específico da URL como uma <type>string</type> (exceto para a opção
         <constant>PHP_URL_PORT</constant>, neste caso, um <type>integer</type> é retornado).
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>
   
   <refsect1 role="returnvalues">
    &reftitle.returnvalues;
    <para>
     Para URLs extremamente mal formadas, <function>parse_url</function> pode retornar
     &false;.
    </para>
    <para>
     Se o parâmetro <parameter>component</parameter> for omitido, um <type>array</type>
     associativo é retornado. O <type>array</type> será composto de ao menos um elemento.
     As possíveis chaves do <type>array</type> são:
     <itemizedlist>
      <listitem>
       <simpara>
        <varname remap="structfield">scheme</varname> - e.g. http
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">host</varname>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">port</varname>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">user</varname>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">pass</varname>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">path</varname>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">query</varname> - após a interrogação <literal>?</literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <varname remap="structfield">fragment</varname> - após a cancela <literal>#</literal>
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Se o parâmetro <parameter>component</parameter> for informado,
     <function>parse_url</function> retorna uma <type>string</type> (ou um
     <type>integer</type>, em caso de <constant>PHP_URL_PORT</constant>)
     ao invés de um <type>array</type>. Se o componente requisitado não existir
     na URL, &null; será retornado.
    </para>
   </refsect1>
   
   <refsect1 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.7</entry>
         <entry>
          Corrigido o reconhecimento do <emphasis>host</emphasis> quando o
          <emphasis>protocolo</emphasis> é omitido e um separador de componentes
          existe.
         </entry>
        </row>
        <row>
         <entry>5.3.3</entry>
         <entry>
          Removido o <constant>E_WARNING</constant> que era emitido quando a
          interpretação de uma URL falhava.
         </entry>
        </row>
        <row>
         <entry>5.1.2</entry>
         <entry>Adicionado o parâmetro <parameter>component</parameter>.</entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </refsect1>
   
   <refsect1 role="examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Um exemplo da <function>parse_url</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname:9090/path?arg=value#anchor';

var_dump(parse_url($url));
var_dump(parse_url($url, PHP_URL_SCHEME));
var_dump(parse_url($url, PHP_URL_USER));
var_dump(parse_url($url, PHP_URL_PASS));
var_dump(parse_url($url, PHP_URL_HOST));
var_dump(parse_url($url, PHP_URL_PORT));
var_dump(parse_url($url, PHP_URL_PATH));
var_dump(parse_url($url, PHP_URL_QUERY));
var_dump(parse_url($url, PHP_URL_FRAGMENT));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(8) {
  ["scheme"]=>
  string(4) "http"
  ["host"]=>
  string(8) "hostname"
  ["port"]=>
  int(9090)
  ["user"]=>
  string(8) "username"
  ["pass"]=>
  string(8) "password"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(9) "arg=value"
  ["fragment"]=>
  string(6) "anchor"
}
string(4) "http"
string(8) "username"
string(8) "password"
string(8) "hostname"
int(9090)
string(5) "/path"
string(9) "arg=value"
string(6) "anchor"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Um exemplo da <function>parse_url</function> sem o protocolo</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = '//www.example.com/path?googleguy=googley';

// Prior to 5.4.7 this would show the path as "//www.example.com/path"
var_dump(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["host"]=>
  string(15) "www.example.com"
  ["path"]=>
  string(5) "/path"
  ["query"]=>
  string(17) "googleguy=googley"
}
]]>
    </screen>
   </example>
  </para>
   </refsect1>
   
   <refsect1 role="notes">
    &reftitle.notes;
    <note>
     <para>
      Esta função pode não retornar resultados corretos para URLs relativas.
     </para>
    </note>
    <note>
     <para>
      O propósito dessa função é interpretar URLs e não URIs. Porém, para
      compatibilidade com versões anteriores, ela é capaz de interpretar
      o protocolo file:// no qual barras triplas (file:///...) são permitidas.
      Qualquer outro protocolo é inválido.
     </para>
    </note>
   </refsect1>
   
   <refsect1 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>pathinfo</function></member>
      <member><function>parse_str</function></member>
      <member><function>http_build_query</function></member>
      <member><function>dirname</function></member>
      <member><function>basename</function></member>
     </simplelist>
    </para>
   </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
