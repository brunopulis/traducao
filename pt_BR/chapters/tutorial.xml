<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 338342 Maintainer: ae Status: ready --><!-- CREDITS: thomasgm,ae,arcristo -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Um simples tutorial</title>

  <para>
   Aqui nós iremos mostrar o básico do básico do PHP em um simples e curto
   tutorial. Este texto fala somente sobre a criação de páginas web dinâmicas com
   PHP, embora o PHP não seja apenas capaz de criar páginas web. Veja
   a seção entitulada <link linkend="intro-whatcando">O que o PHP pode
   fazer</link> para mais informações.
  </para>
  <para>
   Fazer páginas com PHP é o mesmo que criar páginas HTML e
   você pode criá-las e editá-las da mesma maneira que você normalmente cria
   páginas HTML comuns.
  </para>

  <section xml:id="tutorial.requirements">
   <title>O que eu preciso?</title>
   <para>
    Neste tutorial nós presumimos que seu servidor tem suporte ao PHP
    ativado e que todos os arquivos terminando com a extensão <filename>.php</filename>
    são tratados pelo PHP. Na maioria dos servidores esta é a extensão padrão
    para os arquivos PHP, mas pergunte ao administrador do seu servidor para ter certeza. Se
    o seu servidor suporta PHP então você não precisa fazer mais nada. Apenas
    crie seus arquivos <filename>.php</filename>, coloque-os no seu
    diretório web e o servidor irá automaticamente interpretá-los para você.
    Não há necessidade de compilar nada nem você precisa instalar
    qualquer ferramenta extra. Pense nesses arquivos PHP como simples arquivos HTML
    com uma nova família de tags mágicas que permitem que você faça todo
    tipo de coisas.
   </para>
   <para>
    Digamos que você quer salvar sua preciosa conexão e desenvolver tudo localmente.
    Neste caso, você precisará instalar um servidor web, como o
    <link xlink:href="&url.apache;">Apache</link>, e claro o
    <link xlink:href="&url.php.downloads;">PHP</link>. Você provavelmente também
    deseja instalar um banco de dados, como por exemplo o
    <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Você pode instalá-los separadamente ou de um jeito mais simples. Nosso
    manual contém <link linkend="install">instruções de instalação do
    PHP</link> (supondo que você já tem um servidor web configurado). Se
    você tiver problemas com a instalação do PHP, sugerimos que pergunte
    em nossa <link xlink:href="&url.php.mailing-lists;">lista de discussão sobre
    assuntos de instalação.</link>. Se preferir uma rota mais simples então
    <link xlink:href="&url.installkits;">veja um pacote pré-configurado</link>
    para o seu sistema operacional, o qual automaticamente instalará tudo
    com apenas alguns clicks. É fácil de instalar um servidor web com suporte
    ao PHP em qualquer sistema operacional, incluindo MacOSX, Linux e Windows.
    No Linux, você verá que <link xlink:href="&url.rpmfind;">rpmfind</link> e
    <link xlink:href="&url.rpmfind.pbone;">PBone</link> são úteis para
    localizar RPMs. Você também pode usar o <link
     xlink:href="&url.apt-get;">apt-get</link> para localizar pacotes para o Debian.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <title>Sua primeira página PHP</title>
   <para>
    Crie um novo arquivo chamado <filename>ola.php</filename> e coloque-o
    no diretório root do seu servidor web (<varname>DOCUMENT_ROOT</varname>)
    com o seguinte conteúdo:
   </para>
   <para>
    <example>
     <title>Nosso primeiro script PHP: <filename>ola.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Teste PHP</title>
 </head>
 <body>
 <?php echo "<p>Olá Mundo</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Use o seu navegador para acessar o arquivo com a URL de seu servidor web, terminando
      com a referência ao arquivo <literal>/ola.php</literal>. Quando o desenvolvimento for local esta
      URL será algo como <literal>http://localhost/ola.php</literal>
      ou <literal>http://127.0.0.1/ola.php</literal> mas isso depende da
      configuração do seu servidor web. Se tudo foi configurado corretamente, este
      arquivo será interpretado pelo PHP e a seguinte mensagem será enviada ao
      seu navegador:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Teste PHP</title>
 </head>
 <body>
 <p>Olá Mundo</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Este programa é realmente simples e você não precisa do
    PHP para criar uma página assim (fixa). Tudo o que ela faz é mostrar:
    <literal>Hello World</literal> utilizando a instrução <function>echo</function>.
    Note que o arquivo <emphasis>não precisa ser executável</emphasis>
    ou especial. O servidor web descobre que este arquivo precisa ser interpretado
    pelo PHP por causa da extensão ".php", que o servidor é configurado
    para repassar ao PHP. Pense nisso como um arquivo HTML normal que por acaso possui
    um conjunto de tags especiais disponíveis para você fazer muitas coisas interessantes.
   </para>
   <para>
    Se você tentar rodar este exemplo e ele não mostrar nenhuma mensagem de saída, ou aparecer uma caixa de diálogo pedindo para você
    salvar o arquivo, ou você ver todo o conteúdo do arquivo como texto, há uma grande chance do seu
    servidor não ter o PHP habilitado ou não estar configurado corretamente.
    Peça ao seu administrador para habilitar o PHP para você usando o
    capítulo de <link linkend="install">Instalação</link>
    do manual. Se você está desenvolvendo localmente, leia também o
    capítulo de instalação indicado acima para ter certeza de que configurou tudo
    corretamente. Confirme que está acessando o arquivo via HTTP através
    do servidor web. Se acessar o arquivo através do sistema de
    arquivos, então ele não será interpretado pelo PHP. Caso o problema persista,
    não hesite em nos chamar nos vários
    <link xlink:href="&url.php.support;">canais de suporte do PHP</link>.
   </para>
   <para>
    O objetivo do exemplo é mostrar o formato especial das tags do PHP.
    Neste exemplo nós usamos <literal>&lt;?php</literal> para indicar que
    a partir daquele ponto entramos no modo PHP. Então nós colocamos a instrução do PHP e saímos do modo PHP
    adicionando a tag de fechamento, <literal>?&gt;</literal>. Você pode entrar
    e sair do modo PHP num arquivo HTML desta maneira em qualquer lugar que você queira. Para mais
    detalhes, leia a seção do manual que fala da <link linkend="language.basic-syntax">
    sintaxe básica do PHP</link>.
   </para>

   <note>
    <title>Uma Nota sobre Fins de linha</title>
    <para>
     Fins de linha têm pouco significado no HTML, entretanto ainda é uma boa idéia
     fazer o seu HTML ter uma boa aparência e organização através da divisão em linhas. Um
     fim de linha imediatamente após a tag de fechamento
     <literal>?&gt;</literal> será removido pelo PHP. Isso pode ser extremamente
     útil quando você está juntando vários blocos de PHP ou arquivos incluídos
     contendo apenas PHP que não deveriam imprimir nada no processo. Ao mesmo tempo
     isso pode ser um pouco confuso. Você pode colocar um espaço depois da tag de fechamento
     <literal>?&gt;</literal> para forçar a impressão de um espaço e fim de linha
     ou você pode explicitamente imprimir o fim de linha com um último echo/print de dentro de
     seu bloco PHP.
    </para>
   </note>

   <note>
    <title>Uma Nota sobre os Editores de Texto</title>
    <para>
     Há muitos editores de textos e Integrated Development Enviroments (IDEs)
     que você pode usar para criar, editar e gerenciar arquivos PHP. Uma lista  parcial
     destas ferramentas pode ser vista na <link xlink:href="&url.phpeditorlist;">Lista de Editores
     para PHP</link>. Se você gostaria de recomendar um editor, por favor visite a
     página acima e peça ao administrador da página para adicionar o editor à lista. Ter
     um editor que destaca a sintaxe das tags pode ser muito útil.
    </para>
   </note>

   <note>
    <title>Uma Nota sobre os Processadores de Texto</title>
    <para>
     Processadores de texto como o StarOffice Writer, Microsoft Word e Abiword não
     são boas escolhas para editar arquivos PHP. Se você deseja usar um desses para
     este script de teste, você precisa verificar se você está salvando o arquivo como <emphasis>texto
     plano</emphasis> ou o PHP não será capaz de ler e executar o script.
    </para>
   </note>

   <note>
    <title>Uma Nota sobre o Bloco de Notas do Windows</title>
    <para>
     Se você está escrevendo seus scripts PHP usando o Bloco de Notas do Windows, você precisará
     ter certeza de que seus arquivos estão sendo salvos com a extensão <filename>.php</filename>.
     (O Bloco de Notas do Windows adiciona automaticamente a extensão <filename>.txt</filename> aos arquivos a não ser que
     você siga um dos passos a seguir para previnir isto). Quando a caixa de diálogo Salvar estiver aberta e
     você for digitar o nome do seu arquivo, coloque o nome do arquivo entre aspas
     (i.e. "<filename>ola.php</filename>"). Uma alternativa é você clicar na
     lista drop-down 'Documentos de Texto' na caixa de diálogo 'Salvar' e alterar a opção
     para "Todos os tipos de arquivos". Você agora pode digitar o nome do seu arquivo sem usar as aspas.
    </para>
   </note>

   <para>
    Agora que você criou com sucesso um script simples em PHP, é
    hora de criar o mais famoso dos scripts PHP! Uma chamada à função
    <function>phpinfo</function> e você verá muitas
    informações úteis sobre seu sistema e configurações como as
    <link linkend="language.variables.predefined">Variáveis Predefinidas</link> disponíveis,
    módulos carregados pelo PHP, e as opções de <link linkend="configuration">configuração</link>.
    Tire algum tempo para ver e revisar estas informações importantes.
   </para>
   <para>
    <example>
     <title>Como obter informações sobre o PHP</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <title>Algo Útil</title>
   <para>
    Vamos fazer alguma coisa um pouco mais útil agora. Nós iremos checar
    qual é o tipo de navegador que o visitante está utilizando para ver a nossa página.
    Para fazer isto nós iremos checar qual é o valor da string agente que o navegador
    envia como parte de sua requisição HTTP. Esta informação é armazenada em uma <link
    linkend="language.variables">variável</link>. Variáveis sempre começam
    com um símbolo de cifrão no PHP. A variável que nos interessa no momento
    é <varname>$_SERVER['HTTP_USER_AGENT']</varname>.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> é uma
     variável especial reservada do PHP que contém todas as informações sobre o servidor web.
     Ela é conhecida como uma superglobal. Veja a página do manual relacionada às
     <link linkend="language.variables.superglobals">superglobais</link>
     para mais informações. Estas variáveis especiais foram introduzidas no PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. Antes desta versão, nós usávamos
     os velhos arrays <varname>$HTTP_*_VARS</varname>,
     como o <varname>$HTTP_SERVER_VARS</varname>. A partir do PHP 5.4.0
     essas antigas variáveis foram removidas. (Veja também a nota abaixo sobre
     <link linkend="tutorial.oldcode">código antigo</link>.)
    </para>
   </note>
   <para>
    Para exibir esta variável, nós podemos fazer isto:
   </para>
   <para>
    <example>
    <title>Imprimindo uma variável (elemento do Array)</title>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Um exemplo de saída deste script poderia ser:
    </para>
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
     </screen>
   </example>
   </para>
   <para>
    Há muitos <link linkend="language.types">tipos</link> de
    variáveis disponíveis no PHP. No exemplo acima nós imprimimos
    um elemento do <link linkend="language.types.array">Array</link>.
    Arrays podem ser muito úteis.
   </para>
   <para>
    <varname>$_SERVER</varname> é somente uma das variáveis que o PHP automaticamente
    disponibiliza para você. A lista destas variáveis pode ser vista na seção
    <link linkend="reserved.variables">Variáveis Reservadas</link>
    do manual ou você pode obter uma lista completa delas olhando
    o resultado da função <function>phpinfo</function> utilizada no
    exemplo da seção anterior.
   </para>
   <para>
    Você pode colocar múltiplas instruções PHP dentro da tag PHP e criar
    pequenos blocos de códigos que fazem muito mais do que um simples echo.
    Por exemplo, se você quer checar se o navegador é o Internet Explorer você
    pode fazer isso:
   </para>
   <para>
    <example>
     <title>Exemplo utilizando <link linkend="language.control-structures">estruturas
     de controle</link> e <link linkend="language.functions">funções</link></title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'You are using Internet Explorer.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Um exemplo de saída deste script seria:
     </para>
     <screen role="html">
<![CDATA[
You are using Internet Explorer.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    Aqui nós introduzimos alguns conceitos novos. Nós temos a declaração
    <link linkend="control-structures.if">if</link>.
    Se você está familiarizado com a sintaxe básica usada pela
    linguagem C isto parecerá ser lógico para você. Se não você
    provavelmente deve ver um livro introdutório de PHP e ler os
    capítulos iniciais, ou ainda ler a seção <link linkend="langref">Referência da
    Linguagem</link> do manual.
   </para>
   <para>
    O segundo conceito que iremos abordar é a chamada à função <function>strpos</function>.
    A função <function>strpos</function> vem junto com
    o PHP e busca uma palavra em outra palavra. Neste caso nós estamos
    procurando pelo texto <literal>'MSIE'</literal> dentro de
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>. Se
    a palavra for encontrada, a função retorna a posição
    do texto pesquisado em relação ao começo do texto onde houve a pesquisa. Se a palavra não for encontrada
    a função retorna &false;. Neste exemplo, se não retornar &false; o <link
    linkend="control-structures.if">if</link> avalia para &true;
    e o código dentro dos {colchetes} é executado. Caso contrário o código não
    roda. Tente criar exemplos similares
    com <link linkend="control-structures.if">if</link>,
    <link linkend="control-structures.else">else</link>, e outras
    funções como <function>strtoupper</function> e
    <function>strlen</function>. Cada página relacionada contém exemplos
    também. Se você estiver incerto em como utilizar funções você deve ler
    as páginas sobre <link linkend="about.prototypes">como ler uma
    definição de função</link> e a seção sobre
    <link linkend="language.functions">funções do PHP</link>.
   </para>
   <para>
    Nós podemos avançar agora e mostrar a você como alternar entre os modos
    PHP mesmo que você esteja executando blocos de códigos:
   </para>
   <para>
    <example>
     <title>Mesclando entre os modos PHP e HTML</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() must have returned non-false</h3>
<p>You are using Internet Explorer</p>
<?php
} else {
?>
<h3>strpos() must have returned false</h3>
<p>You are not using Internet Explorer</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Um exemplo de saída deste script poderia ser:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() must have returned non-false</h3>
<p>You are using Internet Explorer</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Ao invés de usar a declaração echo do PHP para imprimir a saída dos dados, nós saímos
    do modo do PHP e usamos o HTML normal. O importante a notar aqui
    é que a lógica do script continua intacta. Somente
    um dos blocos HTML será enviado dependendo do
    resultado da chamada à função <function>strpos</function>. Em outras palavras, depende
    se a palavra <literal>MSIE</literal> for encontrada ou não.
   </para>
  </section>

  <section xml:id="tutorial.forms">
   <title>Tratando Formulários</title>
   <para>
    Uma das características mais fortes do PHP é o jeito como ele trata
    formulários HTML. O conceito básico que é importante entender é que qualquer
    elemento de formulário irá automaticamente ficar disponível para seus
    scripts PHP. Por favor leia a seção
    <link linkend="language.variables.external">Variáveis externas
    do PHP</link> para mais informações e exemplos de como usar formulários
    com PHP. Aqui vai um exemplo de formulário HTML:
   </para>
   <para>
    <example>
     <title>Um simples formulário HTML</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>Your name: <input type="text" name="name" /></p>
 <p>Your age: <input type="text" name="age" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Não há nada de especial neste formulário. É um formulário HTML comum
    sem nenhuma tag especial de qualquer tipo. Quando o usuário preencher este formulário
    e clicar no botão enviar, a página <filename>action.php</filename>
    é chamada. Neste arquivo nós teremos algo como isto:
   </para>
   <para>
    <example>
     <title>Imprimindo dados de nosso formulário</title>
     <programlisting role="php">
<![CDATA[
Hi <?php echo htmlspecialchars($_POST['name']); ?>.
You are <?php echo (int)$_POST['age']; ?> years old.
]]>
     </programlisting>
     <para>
      Um exemplo de saída deste script seria:
     </para>
     <screen role="html">
<![CDATA[
Hi Joe. You are 22 years old.
]]>
     </screen>
    </example>
   </para>
   <para>
    Para além de <function>htmlspecialchars</function> e
    <literal>(int)</literal>, deve ser óbvio o que o script faz.
    <function>htmlspecialchars</function> transforma caracteres que sejam
    especiais no HTML na sua forma codificada, de forma que não seja possível injetar tags HTML
    ou JavaScript em sua página. O campo age (idade), por ser um
    número, podemos simplesmente <link linkend="language.types.typecasting">converter</link>
    para um <type>integer</type> que automaticamente eliminará qualquer
    caractere estranho. Você também pode fazer o PHP automaticamente fazer isso
    utilizando a extensão <link linkend="ref.filter">filter</link>.
    As variáveis <varname>$_POST['name']</varname> e <varname>$_POST['age']</varname>
    são criadas automaticamente pelo PHP. Anteriormente
    utilizamos a superglobal <varname>$_SERVER</varname>; acima
    mostramos que a superglobal <varname>$_POST</varname>
    contem todos os dados POST. Perceba como o
    <emphasis>method</emphasis> (método) do formulário é POST. Se fosse utilizado
    o método <emphasis>GET</emphasis> então os dados do formulário acabariam
    na superglobal <varname>$_GET</varname>.
    Você também pode utilizar a superglobal <varname>$_REQUEST</varname>,
    se não se importar qual a origem do dado enviado. Ela
    conterá os dados mesclados de origens GET, POST e COOKIE.
   </para>
   <para>
    Você também pode utilizar XForms no PHP, embora se sinta confortável
    com os formulários HTML clássicos por um bom tempo.
    Embora trabalhar com XForms não seja para iniciantes, você pode se interessar
    por eles. Há uma seção com uma <link linkend="features.xforms">rápida introdução sobre
    manipular dados recebidos de XForms</link> no manual.
   </para>
  </section>

  <section xml:id="tutorial.oldcode">
   <title>Usando códigos antigos com novas versões do PHP</title>
   <para>
    Agora que o PHP cresceu e é uma linguagem de script popular, há
    muitos repositórios públicos e bibliotecas contendo código que você pode reutilizar em seus próprios scripts.
    Os desenvolvedores do PHP tentaram largamente manter a compatibilidade com versões anteriores,
    para que um script escrito em uma versão mais antiga do PHP rode (idealmente) sem nenhuma alteração
    em uma versão mais nova do PHP. Na prática algumas alterações serão geralmente necessárias.
   </para>
   <para>
    Duas das coisas mais importantes alterações recentes que afetam um código antigo são:
    <itemizedlist>
     <listitem>
      <simpara>
       O velho método de utilizar <varname>$HTTP_*_VARS</varname> não está disponível
       desde o PHP 5.4.0. Os seguintes
       <link linkend="language.variables.superglobals">arrays superglobais</link>
       foram introduzidos no PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link>:
       <varname>$_GET</varname>, <varname>$_POST</varname>,
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>,
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname> e <varname>$_SESSION</varname>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Variáveis externas não são mais registradas no escopo global por
       padrão. Em outras palavras, com o PHP
       <link xlink:href="&url.php.release4.2.0;">4.2.0</link> a diretiva
       <link linkend="ini.register-globals">register_globals</link> está
       <emphasis>off</emphasis> (desabilitada) por padrão no arquivo &php.ini;. O
       método indicado atualmente é o de acessar estes valores através dos arrays superglobais como mencionado
       acima. Scripts antigos, livros, e tutoriais podem estar utilizando esta
       diretiva <literal>on</literal> (habilitada). Se ela estivesse <literal>on</literal> (habilitada),
       por exemplo, seria possível utilizar a variável <varname>$id</varname> da URL
       <literal>http://www.example.com/foo.php?id=42</literal>. A diretiva estando habilitada
       ou desabilitada, <varname>$_GET['id']</varname> sempre está disponível.
      </simpara>
     </listitem>
    </itemizedlist>
    Para mais detalhes destas alterações, veja a seção
    <link linkend="language.variables.predefined">variáveis predefinidas</link>
    e links associados.
   </para>
  </section>

  <section xml:id="tutorial.whatsnext">
   <title>O que vem a seguir?</title>
   <para>
    Com esse conhecimento deve ser possível entender a maior parte do
    manual e também os vários scripts de exemplo disponíveis nos
    arquivos de exemplo.
   </para>
   <para>
    Para ver várias apresentações que mostram o que mais o PHP pode fazer,
    veja no site sobre Conferências de PHP em:
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
